/*! @module Database
 */

/*! @module MongoDB
 */

#define _GNU_SOURCE

#include "mongodb_config.h"
#include "util.h"

/*#if HAVE_MONGO_H
*/
#include <mongo.h>
/*#endif*/ /* HAVE_MONGO_H */

extern struct program * MonogDB_program;
struct program * Collection_program;

mongo * getdb(struct object * db);
void push_coll(struct pike_string * coll);
void lookup_collection_program();
void throw_mongodb_error(int ret, struct object * db);

DECLARATIONS

/*! @class LowCollection
 */
PIKECLASS LowCollection
flags ID_PROTECTED;
{
  DECLARATIONS
  PIKEVAR object db;
  PIKEVAR string name;

#define COLL_DB(X) (mongo *)(OBJ2_DB(X))
#define OBJ2_COLLECTION(X) ((struct LowCollection_struct *)get_storage(X, LowCollection_program))
#define THISLC ((struct LowCollection_struct *)get_storage(Pike_fp->current_object, LowCollection_program))
  PIKEFUN void create()
  {

  }
  
  PIKEFUN string _sprintf(mixed format, mixed bar)
  {
    push_text("MongoDB.Collection(");
    push_string(THISLC->name);
    f_add(2);
    push_text(")");
    f_add(2);
  }
  
  PIKEFUN int update_bson(string bson_cond, string bson_op, int flags)
  {
    bson _bson_cond;
    bson _bson_op;
    int ret = 0;
    char * ns;
    mongo * db;
    int ret2;
    
    ns = THIS->name->str; // TODO convert to UTF8.
    
    db = getdb(THISLC->db);
    bson_init_finished_data(&_bson_cond, bson_cond->str);
    bson_init_finished_data(&_bson_op, bson_op->str);
    
    ret = mongo_update(db, ns, &_bson_cond, &_bson_op, flags, NULL);
    
    ret2 = ret;

    if(ret == MONGO_ERROR && db->err == MONGO_IO_ERROR)
    {
      if(mongo_reconnect(db) != MONGO_ERROR)
      {
        ret = mongo_update(db, ns, &_bson_cond, &_bson_op, flags, NULL);
      }
    }

    if(ret != MONGO_OK)
    {
    //      pop_n_elems(args);
      throw_mongodb_error(ret, THISLC->db);
    }

    //    bson_print_raw(bson_data(&_bson), 10);
    RETURN ret;
  }
  
  PIKEFUN int insert_bson(string bson_doc)
  {
    bson _bson;
    int ret = 0;
    char * ns;
    mongo * db;
    int ret2;
    
    ns = THIS->name->str; // TODO convert to UTF8.
    
    db = getdb(THISLC->db);
    bson_init_finished_data(&_bson, bson_doc->str);

//    bson_print_raw(bson_data(&_bson), 10);
    ret = mongo_insert(db, ns, &_bson, NULL);


  ret2 = ret;
  
    if(ret == MONGO_ERROR && db->err == MONGO_IO_ERROR)
    {
      if(mongo_reconnect(db) != MONGO_ERROR)
      {
        ret = mongo_insert(db, ns, &_bson, NULL);
      }
    }
    
    if(ret != MONGO_OK)
    {
//      pop_stack();
      throw_mongodb_error(ret, THISLC->db);
    }
  
//    bson_print_raw(bson_data(&_bson), 10);
          
    RETURN ret;
  }

    PIKEFUN array low_find(string query_bson)
    {
    int ret;
    char * ns;
    mongo * db;
    bson query;
    mongo_cursor cursor[1];
    int count = 0;
    
    ns = THIS->name->str; // TODO convert to UTF8.

    db = getdb(THISLC->db);
    bson_init_finished_data(&query, query_bson->str);

    mongo_cursor_init( cursor, db, ns );
    mongo_cursor_set_query( cursor, &query );
    pop_n_elems(args);
    
    while( mongo_cursor_next( cursor ) == MONGO_OK ) {
      struct pike_string * bt;
      const bson * _rb;
      
      _rb = mongo_cursor_bson(cursor);
      
      bt = make_shared_binary_string(bson_data(_rb), bson_size(_rb));                 
      push_string(bt);
      count++;
    }
    f_aggregate(count);
      


//    bson_destroy( query );
    mongo_cursor_destroy( cursor );

    }

  INIT
  {
  }

  EXIT
  {
    if(THIS->db)
      free_object(THIS->db);
  }
}



/*! @endclass
 */

/*! @class Database
 */
PIKECLASS Database
{

DECLARATIONS
CVAR mongo * db;

/*! @decl void create(string dbpath, int flags)
 */
PIKEFUN void create(string ip, int port)
{
  mongo * db;
  int status;

  db = malloc(sizeof(mongo));
  mongo_init(db);
  mongo_set_op_timeout(db, 2000);
  status = mongo_client(db, ip->str, port);
  if( status != MONGO_OK ) 
  {
    pop_n_elems(args);
    switch(db->err)
    {
      case MONGO_CONN_NO_SOCKET:  Pike_error( "no socket\n" );
      case MONGO_CONN_FAIL:       Pike_error( "connection failed\n" );
      case MONGO_CONN_NOT_MASTER: Pike_error( "not master\n" );
      default: Pike_error("unknown error.\n");
    }
  }
  
  pop_n_elems(args);
  
  THIS->db = db;
}

/*! @decl object get_collection(string name)
 */
PIKEFUN object get_collection(string name)
{  
  add_ref(name);
  pop_n_elems(args);
  push_coll(name);
  free_string(name);
  return;
}

#define OBJ2_COLLECTION(X) ((struct LowCollection_struct *)get_storage(X, LowCollection_program))

void push_coll(struct pike_string * coll)
{
  struct object * c;
  if(!Collection_program)
    lookup_collection_program();
  c = clone_object(Collection_program, 0);
  add_ref(coll);
  OBJ2_COLLECTION(c)->db = this_object();
  OBJ2_COLLECTION(c)->name = coll;
  add_ref(OBJ2_COLLECTION(c)->db);
  push_object(c);
}

void lookup_collection_program()
{
  push_text("Database.MongoDB.Collection");
  SAFE_APPLY_MASTER("resolv", 1 );
  if(Pike_sp[-1].type != T_PROGRAM)
  {
    Pike_error("Unable to load class Database.MongoDB.Collection.\n");
  }
  
  Collection_program = Pike_sp[-1].u.program;
  add_ref(Collection_program);
  pop_stack();
}

INIT
{
}

EXIT
{
  mongo * db;
  db = THIS->db;
  if(db)
  { 
    mongo_destroy(db);
  }
  
  if(Collection_program)
    free_program(Collection_program);
}

}

/*! @endclass
 */

 EXTRA
 {
 
 /*! @decl constant UPDATE_UPSERT 
  *! Index: Update/Insert operation. 
  */
 add_integer_constant("UPDATE_UPSERT", MONGO_UPDATE_UPSERT, 0);
 
 /*! @decl constant UPDATE_MULTI 
   *! Index: Multi-object Update operation. 
   */
  add_integer_constant("UPDATE_MULTI", MONGO_UPDATE_MULTI, 0);
 
 /*! @decl constant UPDATE_MULTI 
   *! Index: Multi-object Update operation. 
   */
  add_integer_constant("UPDATE_BASIC", MONGO_UPDATE_BASIC, 0);
 
 }
 PIKE_MODULE_INIT
 {
   INIT;
 }

 PIKE_MODULE_EXIT
 {
   EXIT;
 }


 void throw_mongodb_error(int ret, struct object * db)
 {
   mongo * _db;
   int ecode;
   char msg2[256];
   const char * msg;

   _db = getdb(db);
   
   printf("ret: %d\n", ret);
   switch(_db->err)
   {
     case MONGO_CONN_NO_SOCKET:    /**< Could not create a socket. */
       Pike_error("Could not create a socket.\n");
     case MONGO_CONN_FAIL:         /**< An error occured while calling connect(). */
       Pike_error("An error occured while calling connect().\n");
     case MONGO_CONN_ADDR_FAIL:    /**< An error occured while calling getaddrinfo(). */
       Pike_error("An error occured while calling getaddrinfo().\n");
     case MONGO_CONN_NOT_MASTER:   /**< Warning: connected to a non-master node (read-only). */
       Pike_error("Warning: connected to a non-master node (read-only).\n");
     case MONGO_CONN_BAD_SET_NAME: /**< Given rs name doesn't match this replica set. */
       Pike_error("Given rs name doesn't match this replica set.\n");
     case MONGO_CONN_NO_PRIMARY:   /**< Can't find primary in replica set. Connection closed. */
       Pike_error("Can't find primary in replica set. Connection closed.\n");

     case MONGO_IO_ERROR:          /**< An error occurred while reading or writing on the socket. */
       Pike_error("An error occurred while reading or writing on the socket.\n");
     case MONGO_SOCKET_ERROR:      /**< Other socket error. */
       Pike_error("Other socket error.\n");
     case MONGO_READ_SIZE_ERROR:   /**< The response is not the expected length. */
       Pike_error("The response is not the expected length.\n");
     case MONGO_COMMAND_FAILED:    /**< The command returned with 'ok' value of 0. */
       Pike_error("The command returned with 'ok' value of 0.\n");
     case MONGO_WRITE_ERROR:       /**< Write with given write_concern returned an error. */
       Pike_error("Write with given write_concern returned an error.\n");
     case MONGO_NS_INVALID:        /**< The name for the ns (database or collection) is invalid. */
       Pike_error("The name for the ns (database or collection) is invalid.\n");
     case MONGO_BSON_INVALID:      /**< BSON not valid for the specified op. */
       Pike_error("BSON not valid for the specified op.\n");
     case MONGO_BSON_NOT_FINISHED: /**< BSON object has not been finished. */
       Pike_error("BSON object has not been finished.\n");
     case MONGO_BSON_TOO_LARGE:    /**< BSON object exceeds max BSON size. */
       Pike_error("BSON object exceeds max BSON size.\n");
     case MONGO_WRITE_CONCERN_INVALID: /**< Supplied write concern object is invalid. */
       Pike_error("Supplied write concern object is invalid.\n");
     default:
       Pike_error("unknown error\n");
     
   }
/*
   msg = mongo_get_server_err_string(_db);
   printf("mongodb error: %s\n", msg);
   Pike_error(msg);
*/
 }

 mongo * getdb(struct object * db)
 {
    struct Database_struct * _db;
    _db = (OBJ2_DATABASE(db));
    return _db->db; 
 }

 /*! @endmodule
  */

 /*! @endmodule
  */
